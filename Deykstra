import sys

#Введем ранг матрицы смежности и саму матрицу

rang = int(input())
Matrix = [[int(x) for x in input().split()] for _ in range(rang)] #Получаем двумерный список
start = int(input()) - 1 #Задаем стартовую вершину, индексация с 0, поэтому вычитаем единицу из порядкового номера вершины

L = 10000 #Задаем максимальное расстояние для вершин, эквивалент бесконечности
visit = [False] * rang #Список посещенных вершин
dist = [L] * rang #Список расстояний до вершин
dist[start] = 0 #Расстояние в стартовой вершине

#Задаем функцию, которая проходится по всем вершинам, проверяет, у какой из непосещенных вершин расстояние самое минимальное 
def way():
    ind = 0
    distmin = L
    for i in range(rang):
        if dist[i] < distmin and visit[i] == False:
            distmin = dist[i]
            ind = i
    return ind
    
    
#Пока все вершины не посещены, выполняем алгоритм
while False in visit:
    u = way()
    for v in range(rang): 
        if Matrix[u][v] !=0 and (not visit[v]): #Смотрим соседнюю вершину (расстояние не 0) и проверяем, что она не посещена
            dist[v] = min(dist[v],dist[u]+Matrix[u][v]) #Проверяем какое расстояние меньше: у вершины или то, которое проходим до нее
    visit[u] = True #После обхода соседей, обозначаем пройденной.
            
print(dist)
